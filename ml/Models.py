from joblib import load
import numpy as np

import torch
from transformers import AutoTokenizer, AutoModel
import pymorphy3
from razdel import tokenize
import nltk
from nltk.corpus import stopwords

class GModel:
    def __init__(self):
        nltk.download("stopwords")
        self.__russian_stopwords = stopwords.words("russian")

        self.__morph = pymorphy3.MorphAnalyzer()

        self.__stopTags = ['PNCT', 'NUMB', 'UNKN', 'LATN', 'ROMN']

        self.__model = load('ml/models/group_model.joblib')

        self.__tokenizer = AutoTokenizer.from_pretrained("cointegrated/LaBSE-en-ru")
        self.__emb_model = AutoModel.from_pretrained("cointegrated/LaBSE-en-ru")
    
    def get_normalize_text(self, s_list: []):
        return self.__get_embeddings(s_list)
        
    
    def __get_embeddings(self, s_list: []):
        res = []
        for s in s_list:
            s = self.__preprocess_text(s)
            encoded_input = self.__tokenizer(s, padding=True, truncation=True, max_length=256, return_tensors='pt')
            with torch.no_grad():
                model_output = self.__emb_model(**encoded_input)
            emb = model_output.pooler_output
            res.append((emb)[0].numpy())

        return np.asarray(res)
    
    def __preprocess_text(self, text):
        tokens = tokenize(text.lower())
        tokens = [self.__morph.parse(token.text)[0].normal_form for token in tokens 
                  if self.__morph.parse(token.text)[0].normal_form not in self.__russian_stopwords and 
                  not any(tag in self.__morph.parse(token.text)[0].tag for tag in self.__stopTags)]
        text = " ".join(tokens) 
        return text
    
    def predict(self, x):
        return self.__model.predict(x)
    
    def test_embeddings(self):
        return np.load('ml/embeddings/embeddings_test.npy')

class TModel:
    def __init__(self):
        nltk.download("stopwords")
        self.__russian_stopwords = stopwords.words("russian")

        self.__morph = pymorphy3.MorphAnalyzer()

        self.__stopTags = ['PNCT', 'NUMB', 'UNKN', 'LATN', 'ROMN']

        self.__model = load('ml/models/theme_model.joblib')

        self.__tokenizer = AutoTokenizer.from_pretrained("cointegrated/LaBSE-en-ru")
        self.__emb_model = AutoModel.from_pretrained("cointegrated/LaBSE-en-ru")
    
    def get_normalize_text(self, s_list: []):
        return self.__get_embeddings(s_list)
        
    
    def __get_embeddings(self, s_list: []):
        res = []
        for s in s_list:
            s = self.__preprocess_text(s)
            encoded_input = self.__tokenizer(s, padding=True, truncation=True, max_length=256, return_tensors='pt')
            with torch.no_grad():
                model_output = self.__emb_model(**encoded_input)
            emb = model_output.pooler_output
            res.append((emb)[0].numpy())

        return np.asarray(res)
    
    def __preprocess_text(self, text):
        tokens = tokenize(text.lower())
        tokens = [self.__morph.parse(token.text)[0].normal_form for token in tokens 
                  if self.__morph.parse(token.text)[0].normal_form not in self.__russian_stopwords and 
                  not any(tag in self.__morph.parse(token.text)[0].tag for tag in self.__stopTags)]
        text = " ".join(tokens) 
        return text
    
    def predict(self, x):
        return self.__model.predict(x)
    
    def test_embeddings(self):
        return np.load('ml/embeddings/embeddings_test.npy')

def code_to_groups(code):
        group_codes = {'Благоустройство': 0, 'Социальное обслуживание и защита': 1, 'Общественный транспорт': 2, 'Здравоохранение/Медицина': 3, 'Мусор/Свалки/ТКО': 4, 'Образование': 5, 'Дороги': 6, 'ЖКХ': 7, 'Коронавирус': 8, 'Экономика и бизнес': 9, 'Культура': 10, 'Связь и телевидение': 11, 'Газ и топливо': 12, 'Безопасность': 13, 'Спецпроекты': 14, 'Мобилизация': 15, 'МФЦ "Мои документы"': 16, 'Физическая культура и спорт': 17, 'Торговля': 18, 'Строительство и архитектура': 19, 'Памятники и объекты культурного наследия': 20, 'Экология': 21, 'Государственная собственность': 22, 'Роспотребнадзор': 23, 'Погребение и похоронное дело': 24, 'Электроснабжение': 25}
        codes_group = {v:k for k, v in group_codes.items()}
        return codes_group[code]

def code_to_themes(code):
        theme_codes = {'★ Ямы во дворах': 0, 'Оказание гос. соц. помощи': 1, 'Дети и многодетные семьи': 2, 'Содержание остановок': 3, 'Технические проблемы с записью на прием к врачу': 4, 'Плата за вывоз ТКО': 5, 'Образовательный процесс': 6, 'Диспансеризация': 7, '★ Просьбы о лечении': 8, '★ Нарушение правил очистки дорог от снега и наледи/Обращения о необходимости очистить тротуар от снега и наледи': 9, 'Предложение по благоустройству': 10, 'Задержка выплат гражданам': 11, 'Аварийное жилье/переселение': 12, '★ Нарушение правил уборки от снега и наледи внутридворового проезда, тротуара, площади': 13, 'Жалобы на управляющие компании': 14, 'Борщевик Сосновского': 15, 'Пешеходные переходы и жд переезды': 16, '★ Уборка/Вывоз мусора': 17, 'Жалобы на врачей': 18, 'Трудоустройство': 19, 'Подтопление автомобильных дорог': 20, 'Тесты на коронавирус': 21, '★ Оказание медицинской помощи не в полном объеме/отказ в оказании медицинской помощи': 22, 'Парки и зоны отдыха': 23, 'Содержание больниц': 24, 'Уборка территорий': 25, '★ Отсутствие контейнерной площадки/Проезд к контейнерной площадке': 26, 'Благоустройство общественного пространства (парк, сквер, пешеходная зона, бульвар, набережная, центральная улица или площадь)': 27, '★ Питание в медицинских учреждениях': 28, 'Нехватка или сокращение врачей и медицинских учреждений': 29, 'Необходима установка и замена дорожных ограждений': 30, '★ Ненадлежащее содержание зеленых насаждений (газонов)/деревьев и кустарников': 31, 'Вырубка деревьев, кустарников': 32, 'Предложить установку нового лежачего полицейского (ИДН)': 33, 'Цены и ценообразование': 34, 'Учреждения культуры': 35, 'Профильный осмотр': 36, 'Доступность вакцин': 37, 'Плата за ЖКУ и работа ЕИРЦ': 38, 'Культурно-досуговые мероприятия': 39, 'Отсутствие холодной воды': 40, 'Ремонт/строительство мостов': 41, 'Завышение платы за коммунальные услуги': 42, 'Очередь': 43, 'Ненадлежащее качество или отсутствие отопления': 44, 'Организация парковок': 45, 'Ненадлежащая уборка подъездов и лифтов': 46, 'Коронавирус': 47, 'Неудовлетворительные условия проезда в транспорте на действующем маршруте': 48, 'Содержание, ремонт и обустройство тротуаров': 49, 'Отсутствие лекарств в аптеках': 50, 'Порядок и пункты вакцинации': 51, '★ Информационно-техническая поддержка': 52, 'Восстановление газоснабжения': 53, 'Отсутствие горячей воды': 54, 'Некачественный капитальный ремонт': 55, 'Ошибки врачей, халатность': 56, 'Создание доступной среды для инвалидов': 57, '★ Неисправные фонари освещения': 58, '★ Скорая помощь': 59, 'Сборы за капитальный ремонт': 60, 'Социальные учреждения': 61, 'Безопасность общественных пространств': 62, 'Льготные лекарства': 63, 'Проблемы с контейнерами': 64, 'Ямы и выбоины на дороге': 65, 'Дезинфекция МКД': 66, 'Вакцинация': 67, '★ Затопление подъездов, подвальных помещений': 68, 'Строительство или реконструкция дорог': 69, 'Отсутствие фонарей освещения': 70, 'Ремонт дороги': 71, 'Занятость и трудоустройство': 72, '★ Некачественно нанесенная разметка на проезжей части': 73, 'Разрушение тротуаров и пешеходных дорожек': 74, 'Отсутствие детских площадок': 75, 'Ливневые канализации (строительство и реконструкция)': 76, 'Отлов безнадзорных собак и кошек': 77, 'Некорректное поведение водительского состава': 78, 'Плохое качество воды': 79, 'Спецпроекты': 80, 'Льготы на проезд и тарифы': 81, 'Поддержка семей мобилизованных': 82, 'Инвалиды': 83, '★ Нарушение правил уборки от снега и наледи территории парка и сквера': 84, '★ Наледь и сосульки на кровле': 85, 'График движения общественного транспорта': 86, 'Пенсионеры и ветераны': 87, 'Государственные услуги': 88, '★ Отсутствие урн, лавочек в общественных местах и дворовой территории': 89, 'Детские оздоровительные лагеря': 90, 'Низкая температура воды/слабое давление': 91, 'Строительство спортивной инфраструктуры': 92, '★ Прорыв трубы/трубопровода': 93, '★ Открытые канализационные люки': 94, 'Безопасность образовательного процесса': 95, 'Нарушение правил проведения земляных работ': 96, 'Хамство медицинских работников': 97, 'Зарплата, компенсации, поощрения, выплаты': 98, 'Зарплата учителей': 99, 'Добавить новый маршрут': 100, '★ Нестационарная торговля (киоски, павильоны, сезонная торговля)': 101, '★ Нарушение правил уборки и вывоза порубочных остатков': 102, 'Ненадлежащее содержание и эксплуатация МКД': 103, 'Перепланировка и реконструкция помещений': 104, 'Дополнительное образование': 105, 'Дистанционное образование': 106, 'Строительство объектов по обращению с отходами': 107, 'Отсутствие электричества': 108, 'Отсутствие лекарств в стационарах': 109, '★ Несанкционированные надписи, рисунки, реклама на фасаде МКД': 110, 'Освещение неисправно или отсутствует': 111, 'Непригодные для проживания жилые помещения': 112, '★ Протечки с кровли (системы водостока)': 113, 'Обустройство асфальтового покрытия парковки, внутридворового проезда, тротуара, пешеходной дорожки, въезда во двор': 114, 'Низкая заработная плата врачей': 115, 'Раздельная сортировка отходов': 116, 'Организация переходов, светофоров/Изменить организацию движения': 117, 'Состояние зданий учреждений и организаций': 118, 'Ремонт спортивных учреждений': 119, 'Памятники и объекты культурного наследия': 120, 'Общее впечатление': 121, 'Благоустройство придомовых территорий': 122, 'Строительство школ, детских садов': 123, 'Запрос на газификацию и её условия': 124, 'Улучшение жилищных условий': 125, 'Нехватка материально-технического обеспечения': 126, 'Работа светофора (установка, изменение режима работы, оборудование кнопкой вызова)': 127, 'Нехватка мест в школах': 128, 'Отсутствие остановочных пунктов': 129, 'Содержание гос. образовательных организаций': 130, 'Выбросы вредных веществ в атмосферу/загрязнение воздуха': 131, '★ Нарушение правил уборки и вывоза загрязненного снега и наледи на газоне': 132, 'Сертификаты и QR-коды': 133, '★ Ненадлежащее состояние игровых элементов на детской или спортивной площадке': 134, '★ Несоблюдение правил уборки проезжей части': 135, 'Волонтерство': 136, 'Проблемы с социальными картами или проездными документами': 137, 'Проблемы в работе горячих линий': 138, '★ Подтопление территории': 139, 'Социальная поддержка медперсонала': 140, 'ВУЗы и ССУЗы': 141, 'Строительство социальных объектов': 142, 'Коронавирусные ограничения': 143, 'Питание': 144, 'ЕГЭ, ОГЭ': 145, 'Содержание дорожных знаков/Установка новых дорожных знаков, с внесением в схему дислокации, замена старых знаков на новые': 146, 'Спортивные мероприятия': 147, 'Строительство зданий': 148, 'Выплаты стипендий': 149, 'Нарушение технологии и (или) сроков производства работ': 150, 'Выбросы вредных веществ в водоёмы/загрязнение водоёмов': 151, 'Изменение класса и количества автобусов': 152, 'Самоизоляция и карантин': 153, 'Подключение к водоснабжению': 154, 'Региональное имущество': 155, 'Изменить или отменить маршрут': 156, 'Пробки': 157, '★ Нарушение правил уборки внутридворового проезда, пешеходной дорожки': 158, 'Предложение дороги в план ремонта': 159, 'Отсутствие аптек': 160, 'Выброс мусора нарушителем': 161, 'Ремонт подъездов': 162, 'Санитарно-эпидемиологическое благополучие': 163, 'Предложения по созданию лечебных центров': 164, 'Проблемы с отоплением детских садов и школ': 165, '★ Стихийные свалки в городе/в парках/в лесу': 166, 'Ненадлежащее состояние фасадов нежилых зданий, объектов и ограждений': 167, 'Обработка и уничтожение грызунов (дератизация)': 168, 'Погребение и похоронное дело': 169, 'Другие проблемы с общедомовой системой водоотведения (канализации)': 170, 'Качество электроснабжения': 171, 'Отсутствие общественных туалетов': 172, 'Беженцы': 173, 'МФЦ "Мои документы"': 174, '★ Засор в общедомовой системе водоотведения (канализации)': 175, 'Несанкционированное ограничение движения, помехи движению, захват земли в полосе отвода автодорог': 176, 'Архитектура города': 177, 'Социальная поддержка учителей': 178, 'Установка ограждений, препятствующих въезду на тротуар, газон на дворовой территории МКД': 179, 'Лифт неисправен или отключен': 180, 'Самовольная установка ограждений на территории общего пользования': 181, 'Кадровые перестановки': 182, 'Некачественно выполненный ремонт дорог': 183, 'Здравоохранение прочее': 184, '★ Повреждение опор ЛЭП': 185, 'Сроки газификации': 186, 'Стоимость, оплата и возврат средств на газификацию': 187, '★ Нарушение правил уборки от снега и наледи детской игровой и спортивной площадки': 188, 'Залитие квартиры': 189, 'Неисправность выступающих конструкций: балконов, козырьков, эркеров, карнизов входных крылец и т. п.': 190, 'Соц.обслуживание прочее': 191, 'Устройство в ДОУ': 192, '★ Парковка на газонах': 193, 'Матери-одиночки, подростки': 194}
        codes_theme = {v:k for k, v in theme_codes.items()}
        return codes_theme[code]